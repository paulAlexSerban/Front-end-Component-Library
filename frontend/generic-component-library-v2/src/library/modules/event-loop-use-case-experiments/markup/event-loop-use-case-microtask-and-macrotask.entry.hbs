<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Event Loop Use Case Experiments</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
  {{{feLibs 'library' 'modules' 'event-loop-use-case-experiments' 'event-loop-use-case-microtask-and-macrotask' 'js'}}}
</head>

<body class='container'>
  <header class='row'>
    <h1>Event Loop Use Case - Microtasks and Macrotasks</h1>
  </header>

  <main class="row">
    <section>

      <pre>
console.log(1);
setTimeout(() => console.log(2));
Promise.resolve().then(() => console.log(3));
Promise.resolve().then(() => setTimeout(() => console.log(4)));
Promise.resolve().then(() => console.log(5));
setTimeout(() => console.log(6));
console.log(7);
</pre>
      <article>
        <p>To summarize,</p>

        <ul>
          <li>Numbers 1 and 7 show up immediately, because simple console.log calls donâ€™t use any queues.</li>
          <li> Then, after the main code flow is finished, the microtask queue runs.
            <ul>
              <li>It has commands: console.log(3); setTimeout(...4); console.log(5).</li>
              <li> Numbers 3 and 5 show up, while setTimeout(() => console.log(4)) adds the console.log(4) call to the
                end of the
                macrotask queue.</li>
              <li>The macrotask queue is now: console.log(2); console.log(6); console.log(4).</li>
            </ul>
          </li>
          <li> After the microtask queue becomes empty, the macrotask queue executes. It outputs 2, 6, 4.</li>
          <li> Finally, we have the output: 1 7 3 5 2 6 4.</li>
        </ul>





      </article>
      <button class="btn btn-danger" id='button-first-micro-macro-example'>Run</button>

      <pre>
console.log(1);
// The first line executes immediately, it outputs `1`.
// Macrotask and microtask queues are empty, as of now.

setTimeout(() => console.log(2));
// `setTimeout` appends the callback to the macrotask queue.
// - macrotask queue content:
//   `console.log(2)`

Promise.resolve().then(() => console.log(3));
// The callback is appended to the microtask queue.
// - microtask queue content:
//   `console.log(3)`

Promise.resolve().then(() => setTimeout(() => console.log(4)));
// The callback with `setTimeout(...4)` is appended to microtasks
// - microtask queue content:
//   `console.log(3); setTimeout(...4)`

Promise.resolve().then(() => console.log(5));
// The callback is appended to the microtask queue
// - microtask queue content:
//   `console.log(3); setTimeout(...4); console.log(5)`

setTimeout(() => console.log(6));
// `setTimeout` appends the callback to macrotasks
// - macrotask queue content:
//   `console.log(2); console.log(6)`

console.log(7);
// Outputs 7 immediately.
</pre>
    </section>




  </main>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous" async
    defer></script>
</body>

</html>