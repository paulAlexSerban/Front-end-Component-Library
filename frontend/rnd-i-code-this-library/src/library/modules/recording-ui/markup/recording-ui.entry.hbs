<html>

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet"
    href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200">
  <style>
    /* ! tailwindcss v3.4.1 | MIT License | https://tailwindcss.com */
    *,
    ::after,
    ::before {
      box-sizing: border-box;
      border-width: 0;
      border-style: solid;
      border-color: #e5e7eb
    }

    ::after,
    ::before {
      --tw-content: ''
    }

    :host,
    html {
      line-height: 1.5;
      -webkit-text-size-adjust: 100%;
      -moz-tab-size: 4;
      tab-size: 4;
      font-family: ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
      font-feature-settings: normal;
      font-variation-settings: normal;
      -webkit-tap-highlight-color: transparent
    }

    body {
      margin: 0;
      line-height: inherit
    }

    hr {
      height: 0;
      color: inherit;
      border-top-width: 1px
    }

    abbr:where([title]) {
      -webkit-text-decoration: underline dotted;
      text-decoration: underline dotted
    }

    h1,
    h2,
    h3,
    h4,
    h5,
    h6 {
      font-size: inherit;
      font-weight: inherit
    }

    a {
      color: inherit;
      text-decoration: inherit
    }

    b,
    strong {
      font-weight: bolder
    }

    code,
    kbd,
    pre,
    samp {
      font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
      font-feature-settings: normal;
      font-variation-settings: normal;
      font-size: 1em
    }

    small {
      font-size: 80%
    }

    sub,
    sup {
      font-size: 75%;
      line-height: 0;
      position: relative;
      vertical-align: baseline
    }

    sub {
      bottom: -.25em
    }

    sup {
      top: -.5em
    }

    table {
      text-indent: 0;
      border-color: inherit;
      border-collapse: collapse
    }

    button,
    input,
    optgroup,
    select,
    textarea {
      font-family: inherit;
      font-feature-settings: inherit;
      font-variation-settings: inherit;
      font-size: 100%;
      font-weight: inherit;
      line-height: inherit;
      color: inherit;
      margin: 0;
      padding: 0
    }

    button,
    select {
      text-transform: none
    }

    [type=button],
    [type=reset],
    [type=submit],
    button {
      -webkit-appearance: button;
      background-color: transparent;
      background-image: none
    }

    :-moz-focusring {
      outline: auto
    }

    :-moz-ui-invalid {
      box-shadow: none
    }

    progress {
      vertical-align: baseline
    }

    ::-webkit-inner-spin-button,
    ::-webkit-outer-spin-button {
      height: auto
    }

    [type=search] {
      -webkit-appearance: textfield;
      outline-offset: -2px
    }

    ::-webkit-search-decoration {
      -webkit-appearance: none
    }

    ::-webkit-file-upload-button {
      -webkit-appearance: button;
      font: inherit
    }

    summary {
      display: list-item
    }

    blockquote,
    dd,
    dl,
    figure,
    h1,
    h2,
    h3,
    h4,
    h5,
    h6,
    hr,
    p,
    pre {
      margin: 0
    }

    fieldset {
      margin: 0;
      padding: 0
    }

    legend {
      padding: 0
    }

    menu,
    ol,
    ul {
      list-style: none;
      margin: 0;
      padding: 0
    }

    dialog {
      padding: 0
    }

    textarea {
      resize: vertical
    }

    input::placeholder,
    textarea::placeholder {
      opacity: 1;
      color: #9ca3af
    }

    [role=button],
    button {
      cursor: pointer
    }

    :disabled {
      cursor: default
    }

    audio,
    canvas,
    embed,
    iframe,
    img,
    object,
    svg,
    video {
      display: block;
      vertical-align: middle
    }

    img,
    video {
      max-width: 100%;
      height: auto
    }

    [hidden] {
      display: none
    }

    *,
    ::before,
    ::after {
      --tw-border-spacing-x: 0;
      --tw-border-spacing-y: 0;
      --tw-translate-x: 0;
      --tw-translate-y: 0;
      --tw-rotate: 0;
      --tw-skew-x: 0;
      --tw-skew-y: 0;
      --tw-scale-x: 1;
      --tw-scale-y: 1;
      --tw-pan-x: ;
      --tw-pan-y: ;
      --tw-pinch-zoom: ;
      --tw-scroll-snap-strictness: proximity;
      --tw-gradient-from-position: ;
      --tw-gradient-via-position: ;
      --tw-gradient-to-position: ;
      --tw-ordinal: ;
      --tw-slashed-zero: ;
      --tw-numeric-figure: ;
      --tw-numeric-spacing: ;
      --tw-numeric-fraction: ;
      --tw-ring-inset: ;
      --tw-ring-offset-width: 0px;
      --tw-ring-offset-color: #fff;
      --tw-ring-color: rgb(59 130 246 / 0.5);
      --tw-ring-offset-shadow: 0 0 #0000;
      --tw-ring-shadow: 0 0 #0000;
      --tw-shadow: 0 0 #0000;
      --tw-shadow-colored: 0 0 #0000;
      --tw-blur: ;
      --tw-brightness: ;
      --tw-contrast: ;
      --tw-grayscale: ;
      --tw-hue-rotate: ;
      --tw-invert: ;
      --tw-saturate: ;
      --tw-sepia: ;
      --tw-drop-shadow: ;
      --tw-backdrop-blur: ;
      --tw-backdrop-brightness: ;
      --tw-backdrop-contrast: ;
      --tw-backdrop-grayscale: ;
      --tw-backdrop-hue-rotate: ;
      --tw-backdrop-invert: ;
      --tw-backdrop-opacity: ;
      --tw-backdrop-saturate: ;
      --tw-backdrop-sepia:
    }

    ::backdrop {
      --tw-border-spacing-x: 0;
      --tw-border-spacing-y: 0;
      --tw-translate-x: 0;
      --tw-translate-y: 0;
      --tw-rotate: 0;
      --tw-skew-x: 0;
      --tw-skew-y: 0;
      --tw-scale-x: 1;
      --tw-scale-y: 1;
      --tw-pan-x: ;
      --tw-pan-y: ;
      --tw-pinch-zoom: ;
      --tw-scroll-snap-strictness: proximity;
      --tw-gradient-from-position: ;
      --tw-gradient-via-position: ;
      --tw-gradient-to-position: ;
      --tw-ordinal: ;
      --tw-slashed-zero: ;
      --tw-numeric-figure: ;
      --tw-numeric-spacing: ;
      --tw-numeric-fraction: ;
      --tw-ring-inset: ;
      --tw-ring-offset-width: 0px;
      --tw-ring-offset-color: #fff;
      --tw-ring-color: rgb(59 130 246 / 0.5);
      --tw-ring-offset-shadow: 0 0 #0000;
      --tw-ring-shadow: 0 0 #0000;
      --tw-shadow: 0 0 #0000;
      --tw-shadow-colored: 0 0 #0000;
      --tw-blur: ;
      --tw-brightness: ;
      --tw-contrast: ;
      --tw-grayscale: ;
      --tw-hue-rotate: ;
      --tw-invert: ;
      --tw-saturate: ;
      --tw-sepia: ;
      --tw-drop-shadow: ;
      --tw-backdrop-blur: ;
      --tw-backdrop-brightness: ;
      --tw-backdrop-contrast: ;
      --tw-backdrop-grayscale: ;
      --tw-backdrop-hue-rotate: ;
      --tw-backdrop-invert: ;
      --tw-backdrop-opacity: ;
      --tw-backdrop-saturate: ;
      --tw-backdrop-sepia:
    }

    .absolute {
      position: absolute
    }

    .relative {
      position: relative
    }

    .inset-0 {
      inset: 0px
    }

    .inset-\[0_20px_auto_20px\] {
      inset: 0 20px auto 20px
    }

    .isolate {
      isolation: isolate
    }

    .-z-10 {
      z-index: -10
    }

    .-z-20 {
      z-index: -20
    }

    .z-10 {
      z-index: 10
    }

    .mx-auto {
      margin-left: auto;
      margin-right: auto
    }

    .my-6 {
      margin-top: 1.5rem;
      margin-bottom: 1.5rem
    }

    .mb-4 {
      margin-bottom: 1rem
    }

    .ml-auto {
      margin-left: auto
    }

    .mr-auto {
      margin-right: auto
    }

    .mt-2 {
      margin-top: 0.5rem
    }

    .block {
      display: block
    }

    .flex {
      display: flex
    }

    .grid {
      display: grid
    }

    .hidden {
      display: none
    }

    .h-32 {
      height: 8rem
    }

    .h-full {
      height: 100%
    }

    .min-h-screen {
      min-height: 100vh
    }

    .w-full {
      width: 100%
    }

    .max-w-sm {
      max-width: 24rem
    }

    .scale-0 {
      --tw-scale-x: 0;
      --tw-scale-y: 0;
      transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))
    }

    .grid-rows-\[1fr_3rem\] {
      grid-template-rows: 1fr 3rem
    }

    .items-center {
      align-items: center
    }

    .justify-end {
      justify-content: flex-end
    }

    .justify-center {
      justify-content: center
    }

    .gap-1 {
      gap: 0.25rem
    }

    .gap-2 {
      gap: 0.5rem
    }

    .gap-4 {
      gap: 1rem
    }

    .space-y-2> :not([hidden])~ :not([hidden]) {
      --tw-space-y-reverse: 0;
      margin-top: calc(0.5rem * calc(1 - var(--tw-space-y-reverse)));
      margin-bottom: calc(0.5rem * var(--tw-space-y-reverse))
    }

    .overflow-y-auto {
      overflow-y: auto
    }

    .bg-cyan-50 {
      --tw-bg-opacity: 1;
      background-color: rgb(236 254 255 / var(--tw-bg-opacity))
    }

    .bg-cyan-700 {
      --tw-bg-opacity: 1;
      background-color: rgb(14 116 144 / var(--tw-bg-opacity))
    }

    .bg-red-500 {
      --tw-bg-opacity: 1;
      background-color: rgb(239 68 68 / var(--tw-bg-opacity))
    }

    .bg-white {
      --tw-bg-opacity: 1;
      background-color: rgb(255 255 255 / var(--tw-bg-opacity))
    }

    .object-cover {
      object-fit: cover
    }

    .p-4 {
      padding: 1rem
    }

    .\!px-2 {
      padding-left: 0.5rem !important;
      padding-right: 0.5rem !important
    }

    .px-2 {
      padding-left: 0.5rem;
      padding-right: 0.5rem
    }

    .px-4 {
      padding-left: 1rem;
      padding-right: 1rem
    }

    .py-2 {
      padding-top: 0.5rem;
      padding-bottom: 0.5rem
    }

    .pt-4 {
      padding-top: 1rem
    }

    .text-center {
      text-align: center
    }

    .text-4xl {
      font-size: 2.25rem;
      line-height: 2.5rem
    }

    .text-lg {
      font-size: 1.125rem;
      line-height: 1.75rem
    }

    .text-sm {
      font-size: 0.875rem;
      line-height: 1.25rem
    }

    .text-xs {
      font-size: 0.75rem;
      line-height: 1rem
    }

    .text-cyan-900 {
      --tw-text-opacity: 1;
      color: rgb(22 78 99 / var(--tw-text-opacity))
    }

    .text-gray-300 {
      --tw-text-opacity: 1;
      color: rgb(209 213 219 / var(--tw-text-opacity))
    }

    .text-gray-700 {
      --tw-text-opacity: 1;
      color: rgb(55 65 81 / var(--tw-text-opacity))
    }

    .text-green-400 {
      --tw-text-opacity: 1;
      color: rgb(74 222 128 / var(--tw-text-opacity))
    }

    .text-white {
      --tw-text-opacity: 1;
      color: rgb(255 255 255 / var(--tw-text-opacity))
    }

    .text-red-500 {
      --tw-text-opacity: 1;
      color: rgb(239 68 68 / var(--tw-text-opacity))
    }

    .opacity-10 {
      opacity: 0.1
    }

    .opacity-70 {
      opacity: 0.7
    }

    .shadow-xl {
      --tw-shadow: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);
      --tw-shadow-colored: 0 20px 25px -5px var(--tw-shadow-color), 0 8px 10px -6px var(--tw-shadow-color);
      box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)
    }

    .transition-all {
      transition-property: all;
      transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
      transition-duration: 150ms
    }

    .duration-500 {
      transition-duration: 500ms
    }

    .duration-700 {
      transition-duration: 700ms
    }

    .before\:absolute::before {
      content: var(--tw-content);
      position: absolute
    }

    .before\:-inset-32::before {
      content: var(--tw-content);
      inset: -8rem
    }

    .before\:-z-20::before {
      content: var(--tw-content);
      z-index: -20
    }

    .before\:rounded-full::before {
      content: var(--tw-content);
      border-radius: 9999px
    }

    .before\:bg-cyan-700::before {
      content: var(--tw-content);
      --tw-bg-opacity: 1;
      background-color: rgb(14 116 144 / var(--tw-bg-opacity))
    }

    .before\:opacity-20::before {
      content: var(--tw-content);
      opacity: 0.2
    }

    .before\:blur-2xl::before {
      content: var(--tw-content);
      --tw-blur: blur(40px);
      filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow)
    }

    .before\:transition-all::before {
      content: var(--tw-content);
      transition-property: all;
      transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
      transition-duration: 150ms
    }

    .before\:duration-300::before {
      content: var(--tw-content);
      transition-duration: 300ms
    }

    .after\:absolute::after {
      content: var(--tw-content);
      position: absolute
    }

    .after\:inset-0::after {
      content: var(--tw-content);
      inset: 0px
    }

    .after\:-z-20::after {
      content: var(--tw-content);
      z-index: -20
    }

    .after\:bg-white::after {
      content: var(--tw-content);
      --tw-bg-opacity: 1;
      background-color: rgb(255 255 255 / var(--tw-bg-opacity))
    }

    .hover\:bg-cyan-900:hover {
      --tw-bg-opacity: 1;
      background-color: rgb(22 78 99 / var(--tw-bg-opacity))
    }

    .hover\:bg-red-700:hover {
      --tw-bg-opacity: 1;
      background-color: rgb(185 28 28 / var(--tw-bg-opacity))
    }

    .focus-visible\:bg-cyan-900:focus-visible {
      --tw-bg-opacity: 1;
      background-color: rgb(22 78 99 / var(--tw-bg-opacity))
    }

    .focus-visible\:bg-red-700:focus-visible {
      --tw-bg-opacity: 1;
      background-color: rgb(185 28 28 / var(--tw-bg-opacity))
    }

    @media (min-width: 640px) {
      .sm\:mr-0 {
        margin-right: 0px
      }

      .sm\:block {
        display: block
      }

      .sm\:px-4 {
        padding-left: 1rem;
        padding-right: 1rem
      }
    }

    .\[\&\>button\>span\]\:transition-all>button>span {
      transition-property: all;
      transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
      transition-duration: 150ms
    }

    .\[\&\>button\>span\]\:duration-300>button>span {
      transition-duration: 300ms
    }

    .\[\&\>button\>span\]\:\[grid-area\:stack\]>button>span {
      grid-area: stack
    }

    .\[\&\>button\]\:grid>button {
      display: grid
    }

    .\[\&\>button\]\:h-12>button {
      height: 3rem
    }

    .\[\&\>button\]\:w-12>button {
      width: 3rem
    }

    .\[\&\>button\]\:place-content-center>button {
      place-content: center
    }

    .\[\&\>button\]\:items-center>button {
      align-items: center
    }

    .\[\&\>button\]\:rounded-full>button {
      border-radius: 9999px
    }

    .\[\&\>button\]\:p-1>button {
      padding: 0.25rem
    }

    .\[\&\>button\]\:text-gray-400>button {
      --tw-text-opacity: 1;
      color: rgb(156 163 175 / var(--tw-text-opacity))
    }

    .\[\&\>button\]\:text-white>button {
      --tw-text-opacity: 1;
      color: rgb(255 255 255 / var(--tw-text-opacity))
    }

    .\[\&\>button\]\:shadow-lg>button {
      --tw-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
      --tw-shadow-colored: 0 10px 15px -3px var(--tw-shadow-color), 0 4px 6px -4px var(--tw-shadow-color);
      box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)
    }

    .\[\&\>button\]\:transition-all>button {
      transition-property: all;
      transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
      transition-duration: 150ms
    }

    .\[\&\>button\]\:duration-300>button {
      transition-duration: 300ms
    }

    .\[\&\>button\]\:\[grid-template-areas\:\'stack\'\]>button {
      grid-template-areas: 'stack'
    }

    .hover\:\[\&\>button\]\:scale-125>button:hover {
      --tw-scale-x: 1.25;
      --tw-scale-y: 1.25;
      transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))
    }

    .hover\:\[\&\>button\]\:bg-cyan-500>button:hover {
      --tw-bg-opacity: 1;
      background-color: rgb(6 182 212 / var(--tw-bg-opacity))
    }

    .hover\:\[\&\>button\]\:text-cyan-900>button:hover {
      --tw-text-opacity: 1;
      color: rgb(22 78 99 / var(--tw-text-opacity))
    }

    .hover\:\[\&\>button\]\:text-white>button:hover {
      --tw-text-opacity: 1;
      color: rgb(255 255 255 / var(--tw-text-opacity))
    }

    .focus-visible\:\[\&\>button\]\:scale-125>button:focus-visible {
      --tw-scale-x: 1.25;
      --tw-scale-y: 1.25;
      transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))
    }

    .focus-visible\:\[\&\>button\]\:bg-cyan-500>button:focus-visible {
      --tw-bg-opacity: 1;
      background-color: rgb(6 182 212 / var(--tw-bg-opacity))
    }

    .focus-visible\:\[\&\>button\]\:text-cyan-900>button:focus-visible {
      --tw-text-opacity: 1;
      color: rgb(22 78 99 / var(--tw-text-opacity))
    }

    .focus-visible\:\[\&\>button\]\:text-white>button:focus-visible {
      --tw-text-opacity: 1;
      color: rgb(255 255 255 / var(--tw-text-opacity))
    }

    .disabled\:\[\&\>button\]\:opacity-30>button:disabled {
      opacity: 0.3
    }

    .\[\&\>div\]\:block>div {
      display: block
    }

    .\[\&\>div\]\:grid>div {
      display: grid
    }

    .\[\&\>div\]\:w-12>div {
      width: 3rem
    }

    .\[\&\>div\]\:grid-cols-2>div {
      grid-template-columns: repeat(2, minmax(0, 1fr))
    }

    .\[\&\>div\]\:place-content-center>div {
      place-content: center
    }

    .\[\&_button\]\:border-none button {
      border-style: none
    }

    .\[\&_button\]\:outline-none button {
      outline: 2px solid transparent;
      outline-offset: 2px
    }

    .focus\:\[\&_button\]\:ring-0 button:focus {
      --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);
      --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(0px + var(--tw-ring-offset-width)) var(--tw-ring-color);
      box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000)
    }
  </style>
</head>

<body class="bg-cyan-50 text-gray-700 flex items-center justify-center min-h-screen p-4
    [&amp;_button]:border-none
    [&amp;_button]:outline-none
    focus:[&amp;_button]:ring-0
">



  <div id="wrapper" class="bg-white w-full max-w-sm relative grid grid-rows-[1fr_3rem] transition-all duration-700 isolate shadow-xl
        before:absolute
        before:transition-all 
        before:duration-300
        before:-inset-32
        before:bg-cyan-700
        X-before:aspect-square
        before:blur-2xl
        before:rounded-full
        before:-z-20
        before:opacity-20
        after:absolute 
        after:inset-0 
        after:bg-white 
        after:-z-20
    ">
    <main class="text-center pt-4  ">
      <header class="flex items-center gap-2 px-4 justify-end 
                [&amp;>button]:text-gray-400
                [&amp;>button]:transition-all
                [&amp;>button]:duration-300
                hover:[&amp;>button]:scale-125
                hover:[&amp;>button]:text-cyan-900
                focus-visible:[&amp;>button]:scale-125
                focus-visible:[&amp;>button]:text-cyan-900
            ">
        <button type="button" id="btn-info" class="material-symbols-outlined">more_horiz</button>
        <button type="button" id="btn-close" class="material-symbols-outlined">close</button>
      </header>
      <p id="recording-state" class="opacity-70 mb-4">&nbsp;</p>
      <div id="timer" class="text-4xl text-cyan-900 block mx-auto flex items-center justify-center gap-1
                [&amp;>div]:block
                [&amp;>div]:w-12
                [&amp;>div]:grid
                [&amp;>div]:grid-cols-2
                [&amp;>div]:place-content-center
            ">
        <div id="timer-hours">
          <span>0</span>
          <span>0</span>
        </div>:
        <div id="timer-minutes">
          <span>0</span>
          <span>0</span>
        </div>:
        <div id="timer-seconds">
          <span>0</span><span>0</span>
        </div>
      </div>
      <div class="my-6 flex items-center justify-center gap-4 text-lg
                Xsm:[&amp;>button]:w-32
                [&amp;>button]:rounded-full 
                [&amp;>button]:
                [&amp;>button]:text-white
                [&amp;>button]:shadow-lg
                [&amp;>button]:h-12
                [&amp;>button]:w-12
                [&amp;>button]:transition-all
                [&amp;>button]:duration-300
                [&amp;>button]:grid
                [&amp;>button]:[grid-template-areas:'stack']
                [&amp;>button]:place-content-center
                [&amp;>button]:items-center
                [&amp;>button>span]:[grid-area:stack]
                [&amp;>button>span]:transition-all
                [&amp;>button>span]:duration-300
                disabled:[&amp;>button]:opacity-30
            ">
        <button type="button" id="btn-start-pause"
          class="bg-red-500 hover:bg-red-700 focus-visible:bg-red-700 animate-in" style="--d:300ms;"
          aria-label="Record/Pause" title="Record/pause">
          <span id="icon-play" class="material-symbols-outlined  material-fill-1">circle</span>
          <span id="icon-pause" class="material-symbols-outlined material-fill-1 scale-0">pause</span>
          <span id="icon-play-pause"
            class="material-symbols-outlined material-fill-1 scale-0 text-4xl">play_pause</span>
        </button>
        <button type="button" id="btn-stop" class="bg-cyan-700 hover:bg-cyan-900 focus-visible:bg-cyan-900 animate-in"
          style="--d:600ms;" disabled="" aria-label="Stop" title="Stop">
          <span class="material-symbols-outlined material-fill-1 text-4xl">stop</span>

        </button>
      </div>

      <h3 class="text-sm">Your recordings:</h3>
      <ul id="list-recordings" class="mt-2 h-32 overflow-y-auto text-xs">
        <p class="text-red-500">No recordings available.</p>
      </ul>
    </main>

    <footer class="z-10 w-full max-w-sm bg-cyan-700 flex items-center gap-1 py-2 px-2 sm:px-4 text-gray-300 text-xs 
            [&amp;>button]:
            [&amp;>button]:transition-all
            [&amp;>button]:duration-300
            [&amp;>button]:rounded-full
            [&amp;>button]:p-1 
            hover:[&amp;>button]:bg-cyan-500
            hover:[&amp;>button]:text-white
            focus-visible:[&amp;>button]:bg-cyan-500
            focus-visible:[&amp;>button]:text-white
        ">
      <button type="button" class="flex items-center gap-1 !px-2 animate-in" style="--d:900ms;">
        <span class="material-symbols-outlined material-fill-1">stylus</span>
        <p class="hidden sm:block">Draw</p>
      </button>
      <button type="button" class="ml-auto material-symbols-outlined animate-in" style="--d:1000ms;">zoom_in</button>
      <button type="button" class="mr-auto sm:mr-0 material-symbols-outlined animate-in"
        style="--d:1100ms;">zoom_out</button>
      <span id="current-zoom" class="mr-auto hidden sm:block animate-in" style="--d:1200ms;">x1</span>
      <button type="button" class="material-symbols-outlined animate-in" style="--d:1300ms;">mic_off</button>
      <button type="button" class="material-symbols-outlined text-green-400 animate-in" style="--d:1400ms;">mic</button>
      <button type="button" class="material-symbols-outlined animate-in" style="--d:1500ms;">volume_mute</button>
    </footer>

    <div class="absolute inset-0  opacity-10 -z-10 blur-xs">
      <img src="https://raw.githubusercontent.com/cbolson/icodethis-challenges/main/assets/images/mic-transparent.png"
        class=" w-full h-full object-cover">
    </div>

    <div id="panel-info"
      class="absolute inset-[0_20px_auto_20px] bg-cyan-700 text-white text-xs space-y-2 py-2 px-4 -z-20 transition-all duration-500">
      <p>Tip - Clicking on the spacebar will also start/pause a recording.</p>
      <p>Nothing is actually recorded. This is a UI demo only</p>
    </div>
  </div>


  <template id="tpl-recording">
    <li class="group flex items-center gap-2 bg-white odd:bg-gray-100 py-1 px-4 text-sm">
      <button
        class="material-symbols-outlined material-fill-1 text-lg text-green-300 transition-all duration-300 hover:text-green-600">play_arrow</button>
      <div class="w-full flex sm:items-center flex-col sm:flex-row text-left">
        <p data-time=""></p>
        <p data-duration="" class="sm:ml-auto text-xs sm:text-sm"></p>
      </div>
      <button btn-delete=""
        class="material-symbols-outlined material-fill-1 text-lg text-gray-400 transition-all duration-300 hover:text-red-400">delete</button>
    </li>
  </template>


  <style>
    .material-fill-1 {
      font-variation-settings:
        'FILL' 1,
        'wght' 400,
        'GRAD' 0,
        'opsz' 48
    }


    /* scollbar width */
    ::-webkit-scrollbar {
      width: 10px;
    }

    /* scollbar - Track */
    ::-webkit-scrollbar-track {
      background: #0891B2;
    }

    /* scollbar - Handle */
    ::-webkit-scrollbar-thumb {
      background: #035063;
      border-radius: 5px;
    }

    /* scollbar - Handle on hover */
    ::-webkit-scrollbar-thumb:hover {
      background: #0891B2
    }



    .animate-in {
      scale: 0;
      animation: animate-in 500ms forwards;
      animation-delay: var(--d, 0ms);
    }


    @keyframes animate-in {
      0% {
        scale: 0
      }

      60% {
        scale: 1.25;
      }

      100% {
        scale: 1;
      }
    }

    /*
footer{
    scale: 1 0%;
    transform-origin: bottom;
    animation: scale-up 500ms ease-in-out 500ms forwards;
}
@keyframes scale-up {
    to{scale: 1;}   
}
*/
  </style>
  <script type="module">
    const btnStartPause = document.querySelector('#btn-start-pause');
    const btnStop = document.querySelector('#btn-stop')
    const timerHours = document.querySelector('#timer-hours');
    const timerMinutes = document.querySelector('#timer-minutes');
    const timerSeconds = document.querySelector('#timer-seconds');
    const titleRecording = document.querySelector("#recording-state");
    const iconPlay = btnStartPause.querySelector("#icon-play")
    const iconPause = btnStartPause.querySelector("#icon-pause")
    const iconPlayPause = btnStartPause.querySelector("#icon-play-pause")
    const listRecordings = document.querySelector("#list-recordings");
    const tplRecording = document.querySelector("#tpl-recording");
    const wrapper = document.querySelector("#wrapper")
    const panelInfo = document.querySelector("#panel-info");
    const btnInfo = document.querySelector("#btn-info");
    const recordings = []

    // timer buttons
    btnStartPause.addEventListener('click', startPauseTimer);
    btnStop.addEventListener('click', stopTimer);


    // sapcebar also starts/pauses recording 
    document.addEventListener('keydown', function (event) {
      // Check if the pressed key is the spacebar (keyCode 32)
      if (event.keyCode === 32) {
        startPauseTimer();
      }
    });


    let timerInterval;
    let timerRunning = false;
    let hours = 0;
    let minutes = 0;
    let seconds = 0;

    // update timer
    function updateTimerDisplay() {
      updateSpan(timerHours, hours);
      updateSpan(timerMinutes, minutes);
      updateSpan(timerSeconds, seconds);
    }

    // to avoid CLS, I prefer to show each digit within it's own span.
    function updateSpan(timerElement, value) {
      const spanElements = timerElement.querySelectorAll('span');
      spanElements[0].innerText = Math.floor(value / 10);
      spanElements[1].innerText = value % 10;
    }

    // Function to start or pause the timer
    function startPauseTimer() {
      if (timerRunning) {
        // Pause the timer
        clearInterval(timerInterval);
        toggleStartButton("pause")
        titleRecording.innerHTML = '<p class="animate-pulse">Recording paused...</p>';
      } else {
        // Start the timer or resume if paused
        timerInterval = setInterval(() => {
          seconds++;
          if (seconds === 60) {
            seconds = 0;
            minutes++;
            if (minutes === 60) {
              minutes = 0;
              hours++;
            }
          }
          updateTimerDisplay();
        }, 1000);
        toggleStartButton("start")



        titleRecording.innerHTML = '<p class="text-red-500 animate-pulse">Recording...</p>';
      }

      btnStop.disabled = false;
      btnStop.classList.add("text-red-500")

      // Toggle the timer running state
      timerRunning = !timerRunning;
    }


    // Stop the timer 
    function stopTimer() {

      clearInterval(timerInterval);
      timerRunning = false;

      // save recording
      // Calculate duration in seconds
      const duration = hours * 3600 + minutes * 60 + seconds;
      // console.log(duration)
      const startTime = new Date();
      // Save recording to the recordings array
      const recording = {
        timestamp: startTime.toISOString(), // Save timestamp as ISO string
        duration: `${padWithZero(hours)}:${padWithZero(minutes)}:${padWithZero(seconds)}`
      };
      recordings.push(recording);


      // console.log(recordings);
      hours = 0;
      minutes = 0;
      seconds = 0;
      updateTimerDisplay();
      toggleStartButton("stop")

      btnStop.disabled = true;
      //btnStop.classList.remove("text-red-500")
      titleRecording.innerHTML = "&nbsp;"

      renderRecordings()
    }

    function toggleStartButton(state) {
      //console.log("state", state)
      switch (state) {
        case "start":
          btnStartPause.classList.add("animate-pulse");
          iconPlay.classList.add("scale-0");
          iconPlayPause.classList.add("scale-0");
          iconPause.classList.remove("scale-0")
          wrapper.classList.add("before:bg-red-500")
          break;
        case "pause":
          btnStartPause.classList.remove("animate-pulse");
          iconPlay.classList.add("scale-0")
          iconPause.classList.add("scale-0")
          iconPlayPause.classList.remove("scale-0");
          wrapper.classList.remove("before:bg-red-500")
          break;
        case "stop":
          btnStartPause.classList.remove("animate-pulse");
          iconPlay.classList.remove("scale-0")
          iconPause.classList.add("scale-0")
          iconPlayPause.classList.add("scale-0");
          wrapper.classList.remove("before:bg-red-500")
          break;
      }
    }

    // load saved recordings message (none on start so it will show the message)
    renderRecordings()

    function renderRecordings() {
      listRecordings.innerHTML = '';
      if (recordings.length === 0) {
        listRecordings.innerHTML = '<p class="text-red-500">No recordings available.</p>';
        return;
      }

      // Iterate over the recordings array and create list items for each recording
      recordings.forEach((recording, index) => {
        // Format the timestamp using Intl.DateTimeFormat
        var formattedTimestamp = new Intl.DateTimeFormat('en-US', {
          day: 'numeric',
          month: 'short',
          year: 'numeric',
          hour: 'numeric',
          minute: 'numeric',
          second: 'numeric',
          hour12: false // Use 24-hour format
        }).format(new Date(recording.timestamp));


        const clone = tplRecording.content.cloneNode(true);
        clone.querySelector("[data-time]").innerText = formattedTimestamp;
        clone.querySelector("[data-duration]").innerText = recording.duration;

        clone.querySelector("[btn-delete]").addEventListener("click", () => {
          // Remove the recording from the array
          recordings.splice(index, 1);
          // Re-render the recordings
          renderRecordings();
        })
        listRecordings.appendChild(clone);
      });
    }

    // Function to pad a number with zero if it's a single digit
    function padWithZero(number) {
      return number < 10 ? '0' + number : '' + number;
    }

    document.querySelector("#btn-close").addEventListener("click", () => {
      // set random transform origin
      wrapper.style.transformOrigin = getRandomTransformOrigin();
      // scale down
      wrapper.classList.add("scale-0")

      // change random transform origin 
      setTimeout(() => wrapper.style.transformOrigin = getRandomTransformOrigin(), 800)
      // rescale
      setTimeout(() => wrapper.classList.remove("scale-0"), 2000)
    })

    // get random transform origin posiion
    function getRandomTransformOrigin() {
      const transformOrigins = [
        "top left", "top right", "bottom left", "bottom right",
        "center top", "center bottom", "left center", "right center", "center"
      ];

      // Generate a random index
      const randomIndex = Math.floor(Math.random() * transformOrigins.length);

      // Return the randomly selected transform origin
      return transformOrigins[randomIndex];
    }

    btnInfo.addEventListener("click", () => {
      panelInfo.classList.toggle("-translate-y-full")
      setTimeout(() => panelInfo.classList.remove("-translate-y-full"), 6000)
    })
  </script>
</body>

</html>