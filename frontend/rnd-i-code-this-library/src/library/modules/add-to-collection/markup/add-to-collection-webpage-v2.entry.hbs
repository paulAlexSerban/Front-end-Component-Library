<html lang="en" class="">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Challenge's name</title>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin="">
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&amp;display=swap" rel="stylesheet">
  <link rel="stylesheet"
    href="https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200">
  <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
  <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
  <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/framer-motion@10.18.0/dist/framer-motion.min.js"></script>
  <script src="https://cdn.tailwindcss.com"></script>
  <script>
    tailwind.config = {
      darkMode: "class",
      theme: {
        fontFamily: {
          sans: ["Roboto", "sans-serif"],
        },
        extend: {
          colors: {
            blue: {
              550: "#3a82e4",
              950: "#24366e",
            }
          },
          backgroundImage: {
            'gradient-radial': 'radial-gradient(var(--tw-gradient-stops))',
          },
          keyframes: {
            jump: {
              '0%, 100%': {
                "transform": "translateY(-0.4)"
              },
              '50%': {
                "transform": "translateY(0.4em)"
              },
            }
          },
          animation: {
            jump: 'jump 2s ease-in-out infinite',
          }
        }
      }
    };
  </script>
  <style>
    .material-symbols-rounded {
      font-variation-settings:
        'FILL' 0,
        'wght' 400,
        'GRAD' 0,
        'opsz' 24;
    }

    ::-webkit-scrollbar {
      height: .2em;
      width: .6em;
    }

    ::-webkit-scrollbar-track {
      background: hsl(0, 0%, 16%);
    }

    ::-webkit-scrollbar-thumb {
      border-radius: 0em;
      background: hsl(207, 31%, 94%);
      cursor: pointer;
    }

    .hidden-scrollbar {
      -ms-overflow-style: none;
      scrollbar-width: none;
    }

    .hidden-scrollbar::-webkit-scrollbar {
      display: none;
    }
  </style>
  <style>
    /* ! tailwindcss v3.4.1 | MIT License | https://tailwindcss.com */
    *,
    ::after,
    ::before {
      box-sizing: border-box;
      border-width: 0;
      border-style: solid;
      border-color: #e5e7eb
    }

    ::after,
    ::before {
      --tw-content: ''
    }

    :host,
    html {
      line-height: 1.5;
      -webkit-text-size-adjust: 100%;
      -moz-tab-size: 4;
      tab-size: 4;
      font-family: Roboto, sans-serif;
      font-feature-settings: normal;
      font-variation-settings: normal;
      -webkit-tap-highlight-color: transparent
    }

    body {
      margin: 0;
      line-height: inherit
    }

    hr {
      height: 0;
      color: inherit;
      border-top-width: 1px
    }

    abbr:where([title]) {
      -webkit-text-decoration: underline dotted;
      text-decoration: underline dotted
    }

    h1,
    h2,
    h3,
    h4,
    h5,
    h6 {
      font-size: inherit;
      font-weight: inherit
    }

    a {
      color: inherit;
      text-decoration: inherit
    }

    b,
    strong {
      font-weight: bolder
    }

    code,
    kbd,
    pre,
    samp {
      font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
      font-feature-settings: normal;
      font-variation-settings: normal;
      font-size: 1em
    }

    small {
      font-size: 80%
    }

    sub,
    sup {
      font-size: 75%;
      line-height: 0;
      position: relative;
      vertical-align: baseline
    }

    sub {
      bottom: -.25em
    }

    sup {
      top: -.5em
    }

    table {
      text-indent: 0;
      border-color: inherit;
      border-collapse: collapse
    }

    button,
    input,
    optgroup,
    select,
    textarea {
      font-family: inherit;
      font-feature-settings: inherit;
      font-variation-settings: inherit;
      font-size: 100%;
      font-weight: inherit;
      line-height: inherit;
      color: inherit;
      margin: 0;
      padding: 0
    }

    button,
    select {
      text-transform: none
    }

    [type=button],
    [type=reset],
    [type=submit],
    button {
      -webkit-appearance: button;
      background-color: transparent;
      background-image: none
    }

    :-moz-focusring {
      outline: auto
    }

    :-moz-ui-invalid {
      box-shadow: none
    }

    progress {
      vertical-align: baseline
    }

    ::-webkit-inner-spin-button,
    ::-webkit-outer-spin-button {
      height: auto
    }

    [type=search] {
      -webkit-appearance: textfield;
      outline-offset: -2px
    }

    ::-webkit-search-decoration {
      -webkit-appearance: none
    }

    ::-webkit-file-upload-button {
      -webkit-appearance: button;
      font: inherit
    }

    summary {
      display: list-item
    }

    blockquote,
    dd,
    dl,
    figure,
    h1,
    h2,
    h3,
    h4,
    h5,
    h6,
    hr,
    p,
    pre {
      margin: 0
    }

    fieldset {
      margin: 0;
      padding: 0
    }

    legend {
      padding: 0
    }

    menu,
    ol,
    ul {
      list-style: none;
      margin: 0;
      padding: 0
    }

    dialog {
      padding: 0
    }

    textarea {
      resize: vertical
    }

    input::placeholder,
    textarea::placeholder {
      opacity: 1;
      color: #9ca3af
    }

    [role=button],
    button {
      cursor: pointer
    }

    :disabled {
      cursor: default
    }

    audio,
    canvas,
    embed,
    iframe,
    img,
    object,
    svg,
    video {
      display: block;
      vertical-align: middle
    }

    img,
    video {
      max-width: 100%;
      height: auto
    }

    [hidden] {
      display: none
    }

    *,
    ::before,
    ::after {
      --tw-border-spacing-x: 0;
      --tw-border-spacing-y: 0;
      --tw-translate-x: 0;
      --tw-translate-y: 0;
      --tw-rotate: 0;
      --tw-skew-x: 0;
      --tw-skew-y: 0;
      --tw-scale-x: 1;
      --tw-scale-y: 1;
      --tw-pan-x: ;
      --tw-pan-y: ;
      --tw-pinch-zoom: ;
      --tw-scroll-snap-strictness: proximity;
      --tw-gradient-from-position: ;
      --tw-gradient-via-position: ;
      --tw-gradient-to-position: ;
      --tw-ordinal: ;
      --tw-slashed-zero: ;
      --tw-numeric-figure: ;
      --tw-numeric-spacing: ;
      --tw-numeric-fraction: ;
      --tw-ring-inset: ;
      --tw-ring-offset-width: 0px;
      --tw-ring-offset-color: #fff;
      --tw-ring-color: rgb(59 130 246 / 0.5);
      --tw-ring-offset-shadow: 0 0 #0000;
      --tw-ring-shadow: 0 0 #0000;
      --tw-shadow: 0 0 #0000;
      --tw-shadow-colored: 0 0 #0000;
      --tw-blur: ;
      --tw-brightness: ;
      --tw-contrast: ;
      --tw-grayscale: ;
      --tw-hue-rotate: ;
      --tw-invert: ;
      --tw-saturate: ;
      --tw-sepia: ;
      --tw-drop-shadow: ;
      --tw-backdrop-blur: ;
      --tw-backdrop-brightness: ;
      --tw-backdrop-contrast: ;
      --tw-backdrop-grayscale: ;
      --tw-backdrop-hue-rotate: ;
      --tw-backdrop-invert: ;
      --tw-backdrop-opacity: ;
      --tw-backdrop-saturate: ;
      --tw-backdrop-sepia:
    }

    ::backdrop {
      --tw-border-spacing-x: 0;
      --tw-border-spacing-y: 0;
      --tw-translate-x: 0;
      --tw-translate-y: 0;
      --tw-rotate: 0;
      --tw-skew-x: 0;
      --tw-skew-y: 0;
      --tw-scale-x: 1;
      --tw-scale-y: 1;
      --tw-pan-x: ;
      --tw-pan-y: ;
      --tw-pinch-zoom: ;
      --tw-scroll-snap-strictness: proximity;
      --tw-gradient-from-position: ;
      --tw-gradient-via-position: ;
      --tw-gradient-to-position: ;
      --tw-ordinal: ;
      --tw-slashed-zero: ;
      --tw-numeric-figure: ;
      --tw-numeric-spacing: ;
      --tw-numeric-fraction: ;
      --tw-ring-inset: ;
      --tw-ring-offset-width: 0px;
      --tw-ring-offset-color: #fff;
      --tw-ring-color: rgb(59 130 246 / 0.5);
      --tw-ring-offset-shadow: 0 0 #0000;
      --tw-ring-shadow: 0 0 #0000;
      --tw-shadow: 0 0 #0000;
      --tw-shadow-colored: 0 0 #0000;
      --tw-blur: ;
      --tw-brightness: ;
      --tw-contrast: ;
      --tw-grayscale: ;
      --tw-hue-rotate: ;
      --tw-invert: ;
      --tw-saturate: ;
      --tw-sepia: ;
      --tw-drop-shadow: ;
      --tw-backdrop-blur: ;
      --tw-backdrop-brightness: ;
      --tw-backdrop-contrast: ;
      --tw-backdrop-grayscale: ;
      --tw-backdrop-hue-rotate: ;
      --tw-backdrop-invert: ;
      --tw-backdrop-opacity: ;
      --tw-backdrop-saturate: ;
      --tw-backdrop-sepia:
    }

    .fixed {
      position: fixed
    }

    .absolute {
      position: absolute
    }

    .relative {
      position: relative
    }

    .inset-0 {
      inset: 0px
    }

    .z-10 {
      z-index: 10
    }

    .m-4 {
      margin: 1rem
    }

    .mt-6 {
      margin-top: 1.5rem
    }

    .flex {
      display: flex
    }

    .grid {
      display: grid
    }

    .aspect-square {
      aspect-ratio: 1 / 1
    }

    .size-10 {
      width: 2.5rem;
      height: 2.5rem
    }

    .size-full {
      width: 100%;
      height: 100%
    }

    .h-20 {
      height: 5rem
    }

    .h-dvh {
      height: 100dvh
    }

    .min-h-dvh {
      min-height: 100dvh
    }

    .w-full {
      width: 100%
    }

    .min-w-\[12rem\] {
      min-width: 12rem
    }

    .max-w-4xl {
      max-width: 56rem
    }

    .max-w-xl {
      max-width: 36rem
    }

    .cursor-pointer {
      cursor: pointer
    }

    .flex-col {
      flex-direction: column
    }

    .flex-wrap {
      flex-wrap: wrap
    }

    .items-center {
      align-items: center
    }

    .justify-center {
      justify-content: center
    }

    .justify-between {
      justify-content: space-between
    }

    .gap-2 {
      gap: 0.5rem
    }

    .gap-8 {
      gap: 2rem
    }

    .gap-y-1 {
      row-gap: 0.25rem
    }

    .space-x-4> :not([hidden])~ :not([hidden]) {
      --tw-space-x-reverse: 0;
      margin-right: calc(1rem * var(--tw-space-x-reverse));
      margin-left: calc(1rem * calc(1 - var(--tw-space-x-reverse)))
    }

    .space-y-2> :not([hidden])~ :not([hidden]) {
      --tw-space-y-reverse: 0;
      margin-top: calc(0.5rem * calc(1 - var(--tw-space-y-reverse)));
      margin-bottom: calc(0.5rem * var(--tw-space-y-reverse))
    }

    .self-end {
      align-self: flex-end
    }

    .overflow-hidden {
      overflow: hidden
    }

    .rounded {
      border-radius: 0.25rem
    }

    .rounded-full {
      border-radius: 9999px
    }

    .rounded-lg {
      border-radius: 0.5rem
    }

    .rounded-xl {
      border-radius: 0.75rem
    }

    .border {
      border-width: 1px
    }

    .border-transparent {
      border-color: transparent
    }

    .bg-blue-550 {
      --tw-bg-opacity: 1;
      background-color: rgb(58 130 228 / var(--tw-bg-opacity))
    }

    .bg-blue-950 {
      --tw-bg-opacity: 1;
      background-color: rgb(36 54 110 / var(--tw-bg-opacity))
    }

    .bg-blue-950\/90 {
      background-color: rgb(36 54 110 / 0.9)
    }

    .bg-white {
      --tw-bg-opacity: 1;
      background-color: rgb(255 255 255 / var(--tw-bg-opacity))
    }

    .bg-white\/5 {
      background-color: rgb(255 255 255 / 0.05)
    }

    .bg-gradient-to-r {
      background-image: linear-gradient(to right, var(--tw-gradient-stops))
    }

    .from-purple-400 {
      --tw-gradient-from: #c084fc var(--tw-gradient-from-position);
      --tw-gradient-to: rgb(192 132 252 / 0) var(--tw-gradient-to-position);
      --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to)
    }

    .to-pink-400 {
      --tw-gradient-to: #f472b6 var(--tw-gradient-to-position)
    }

    .object-cover {
      object-fit: cover
    }

    .p-4 {
      padding: 1rem
    }

    .px-4 {
      padding-left: 1rem;
      padding-right: 1rem
    }

    .py-2 {
      padding-top: 0.5rem;
      padding-bottom: 0.5rem
    }

    .text-lg {
      font-size: 1.125rem;
      line-height: 1.75rem
    }

    .text-xl {
      font-size: 1.25rem;
      line-height: 1.75rem
    }

    .font-bold {
      font-weight: 700
    }

    .font-medium {
      font-weight: 500
    }

    .text-gray-500 {
      --tw-text-opacity: 1;
      color: rgb(107 114 128 / var(--tw-text-opacity))
    }

    .text-rose-600 {
      --tw-text-opacity: 1;
      color: rgb(225 29 72 / var(--tw-text-opacity))
    }

    .text-white {
      --tw-text-opacity: 1;
      color: rgb(255 255 255 / var(--tw-text-opacity))
    }

    .shadow-xl {
      --tw-shadow: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);
      --tw-shadow-colored: 0 20px 25px -5px var(--tw-shadow-color), 0 8px 10px -6px var(--tw-shadow-color);
      box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)
    }

    .duration-500 {
      transition-duration: 500ms
    }

    .hover\:border-gray-300:hover {
      --tw-border-opacity: 1;
      border-color: rgb(209 213 219 / var(--tw-border-opacity))
    }

    .hover\:border-pink-300:hover {
      --tw-border-opacity: 1;
      border-color: rgb(249 168 212 / var(--tw-border-opacity))
    }

    .hover\:bg-blue-550\/10:hover {
      background-color: rgb(58 130 228 / 0.1)
    }

    @media (min-width: 640px) {
      .sm\:grid-cols-2 {
        grid-template-columns: repeat(2, minmax(0, 1fr))
      }

      .sm\:p-8 {
        padding: 2rem
      }
    }

    @media (min-width: 1024px) {
      .lg\:grid-cols-3 {
        grid-template-columns: repeat(3, minmax(0, 1fr))
      }
    }
  </style>


<body>
  <div id="root">
    <div class="bg-blue-950 relative flex items-center justify-center w-full min-h-dvh">
      <main class="bg-white/5 w-full max-w-4xl m-4 p-4 rounded-xl sm:p-8">
        <section class="grid gap-8 sm:grid-cols-2 lg:grid-cols-3">
          <figure class="group rounded overflow-hidden cursor-pointer flex flex-col">
            <div class="size-full aspect-square"><img
                src="https://icodethis.com/_next/image?url=%2Fimages%2Fprojects%2Fdashboard_ui.png&amp;w=1920&amp;q=75"
                alt="Dashboard UI" class="size-full object-cover"></div>
            <figcaption class="bg-blue-550 text-white p-4">
              <p>Dashboard UI</p>
            </figcaption>
          </figure>
          <figure class="group rounded overflow-hidden cursor-pointer flex flex-col">
            <div class="size-full aspect-square"><img
                src="https://icodethis.com/_next/image?url=%2Fimages%2Fprojects%2Fmanagement_dashboard.png&amp;w=1920&amp;q=75"
                alt="Managment Dashboard" class="size-full object-cover"></div>
            <figcaption class="bg-blue-550 text-white p-4">
              <p>Managment Dashboard</p>
            </figcaption>
          </figure>
          <figure class="group rounded overflow-hidden cursor-pointer flex flex-col">
            <div class="size-full aspect-square"><img
                src="https://icodethis.com/_next/image?url=%2Fimages%2Fprojects%2Flogin_card.png&amp;w=1920&amp;q=75"
                alt="Login Card" class="size-full object-cover"></div>
            <figcaption class="bg-blue-550 text-white p-4">
              <p>Login Card</p>
            </figcaption>
          </figure>
          <figure class="group rounded overflow-hidden cursor-pointer flex flex-col">
            <div class="size-full aspect-square"><img
                src="https://icodethis.com/_next/image?url=%2Fimages%2Fprojects%2Fsignup_form_3.png&amp;w=1920&amp;q=75"
                alt="Signup Form 3" class="size-full object-cover"></div>
            <figcaption class="bg-blue-550 text-white p-4">
              <p>Signup Form 3</p>
            </figcaption>
          </figure>
          <figure class="group rounded overflow-hidden cursor-pointer flex flex-col">
            <div class="size-full aspect-square"><img
                src="https://icodethis.com/_next/image?url=%2Fimages%2Fprojects%2Flanguage_learn.png&amp;w=1920&amp;q=75"
                alt="Language Learn" class="size-full object-cover"></div>
            <figcaption class="bg-blue-550 text-white p-4">
              <p>Language Learn</p>
            </figcaption>
          </figure>
          <figure class="group rounded overflow-hidden cursor-pointer flex flex-col">
            <div class="size-full aspect-square"><img
                src="https://icodethis.com/_next/image?url=%2Fimages%2Fprojects%2Ftags.png&amp;w=1920&amp;q=75"
                alt="Tags" class="size-full object-cover"></div>
            <figcaption class="bg-blue-550 text-white p-4">
              <p>Tags</p>
            </figcaption>
          </figure>
        </section>
      </main>
    </div>
  </div>
  {{!-- <script type="module">
    import * as HeroIcons from "https://cdn.skypack.dev/heroicons-react";

    function App() {
      const [projects, setProjects] = React.useState([
        { id: 1, name: "Dashboard UI", designFileURL: "https://icodethis.com/_next/image?url=%2Fimages%2Fprojects%2Fdashboard_ui.png&w=1920&q=75" },
        { id: 2, name: "Managment Dashboard", designFileURL: "https://icodethis.com/_next/image?url=%2Fimages%2Fprojects%2Fmanagement_dashboard.png&w=1920&q=75" },
        { id: 3, name: "Login Card", designFileURL: "https://icodethis.com/_next/image?url=%2Fimages%2Fprojects%2Flogin_card.png&w=1920&q=75" },
        { id: 4, name: "Signup Form 3", designFileURL: "https://icodethis.com/_next/image?url=%2Fimages%2Fprojects%2Fsignup_form_3.png&w=1920&q=75" },
        { id: 5, name: "Language Learn", designFileURL: "https://icodethis.com/_next/image?url=%2Fimages%2Fprojects%2Flanguage_learn.png&w=1920&q=75" },
        { id: 6, name: "Tags", designFileURL: "https://icodethis.com/_next/image?url=%2Fimages%2Fprojects%2Ftags.png&w=1920&q=75" },
      ]);

      const [collections, setCollections] = React.useState([
        { id: 1, name: "Dashboard", itemIds: [1, 2], updatedAt: "2024-01-07T09:24:08" },
        { id: 2, name: "Authentification", itemIds: [3, 4], updatedAt: "2024-01-10T12:30:00" },
        { id: 3, name: "UI Kit", itemIds: [5, 6], updatedAt: "2024-01-017T16:42:21" },
      ]);

      const [isPopupVisible, setIsPopupVisible] = React.useState(true);
      const [selectedProject, setSelectedProject] = React.useState(null);
      const { motion, AnimatePresence } = window.Motion;

      const handleProjectClick = (project) => {
        setSelectedProject(project);
        setIsPopupVisible(true);
      };

      const handleClosePopup = () => {
        setIsPopupVisible(false);
        setSelectedProject(null);
      };

      return (
        <div className="bg-blue-950 relative flex items-center justify-center w-full min-h-dvh">
          <main className="bg-white/5 w-full max-w-4xl m-4 p-4 rounded-xl sm:p-8">
            <ProjectList projects={projects} onProjectClick={handleProjectClick} />
          </main>

          {isPopupVisible && <CollectionPopUp collections={collections} projects={projects} onClose={handleClosePopup} />}
        </div>
      );
    }

    function ProjectList({ projects, onProjectClick }) {
      return (
        <section className="grid gap-8 sm:grid-cols-2 lg:grid-cols-3">
          {projects.map(project => {
            return <Project key={project.id} project={project} onClick={() => onProjectClick(project)} />
          })}
        </section>
      );
    }

    function Project({ project, onClick }) {
      return (
        <figure className="group rounded overflow-hidden cursor-pointer flex flex-col" onClick={onClick}>
          <div className="size-full aspect-square">
            <img src={project.designFileURL} alt={project.name} className="size-full object-cover" />
          </div>

          <figcaption className="bg-blue-550 text-white p-4">
            <p>
              {project.name}
            </p>
          </figcaption>
        </figure>
      );
    }

    function CollectionPopUp({ collections, projects, onClose }) {
      const [selectedCollectionId, setSelectedCollectionId] = React.useState(null);
      const { motion, AnimatePresence } = window.Motion;

      return (
        <motion.section
          initial={{ opacity: 0, scale: 0.5, }}
          animate={{ opacity: 1, scale: 1 }}
          exit={{ opacity: 0, scale: 0 }}
          transition={{ type: 'spring', stiffness: 90, damping: 10, duration: 0.5 }}
          className="bg-blue-950/90 fixed inset-0 flex items-center justify-center w-full h-dvh"
        >
          <div className="bg-white absolute z-10 w-full max-w-xl m-4 p-4 rounded-xl shadow-xl flex flex-col gap-8 sm:p-8">
            <div className="flex flex-col gap-y-1">
              <button onClick={onClose} className="self-end size-10 rounded-full flex items-center justify-center duration-500 hover:bg-blue-550/10">
                <CloseSVGIcon />
              </button>

              <h3 className="text-xl font-bold">Add to collection</h3>
            </div>

            <div className="space-y-2">
              {collections.map((collection) => (
                <CollectionItem
                  key={collection.id}
                  collection={collection}
                  projects={projects}
                  isSelected={selectedCollectionId === collection.id}
                  onSelect={() => setSelectedCollectionId(collection.id)}
                />
              ))}
            </div>

            <fieldset className="flex flex-wrap justify-between items-center mt-6">
              <button className="text-rose-600 min-w-[12rem] px-4 py-2 rounded-lg border border-transparent flex items-center gap-2 hover:border-pink-300">
                <PlusSVGIcon />
                Create new
              </button>

              <button className="bg-gradient-to-r from-purple-400 to-pink-400 text-white min-w-[12rem] px-4 py-2 rounded-lg">Save</button>
            </fieldset>
          </div>
        </motion.section>
      );
    }

    function CollectionItem({ collection, projects, isSelected, onSelect }) {
      const formatDate = (dateString) => {
        const options = { year: 'numeric', month: 'long', day: 'numeric' };
        return new Date(dateString).toLocaleDateString(undefined, options);
      };

      const firstProject = projects.find(project => project.id === collection.itemIds[0]);
      const firstItemImageURL = firstProject ? firstProject.designFileURL : 'https://placehold.co/600x400/000000/FFFFFF/png';

      return (
        <div className={`flex items-center justify-between p-4 rounded-lg border ${isSelected ? 'border-blue-550 bg-blue-550/5' : 'border-transparent'} hover:border-gray-300`} onClick={() => onSelect()}>
          <div className="flex items-center space-x-4">
            <div className="h-20 aspect-2/3 rounded overflow-hidden">
              <img src={firstItemImageURL} alt={collection.name} className="size-full object-cover" />
            </div>

            <div>
              <p className="text-lg font-medium">
                {collection.name}
              </p>

              <p className="text-gray-500">
                {`${collection.itemIds.length} items - Updated ${formatDate(collection.updatedAt)}`}
              </p>

            </div>
          </div>

          {isSelected && (
            <span className="bg-blue-950 text-blue-100 size-10 aspect-square border border-4 border-white/80 rounded-full inline-flex items-center justify-center">
              <CheckSVGIcon />
            </span>
          )}
        </div>
      );
    }

    function CheckSVGIcon({ size, className }) {
      return (
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 448 512" className={className}>
          <path d="M438.6 105.4c12.5 12.5 12.5 32.8 0 45.3l-256 256c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L160 338.7 393.4 105.4c12.5-12.5 32.8-12.5 45.3 0z" fill="currentColor" />
        </svg>
      );
    }

    function PlusSVGIcon({ size, className }) {
      return (
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 448 512" className={className}>
          <path d="M256 80c0-17.7-14.3-32-32-32s-32 14.3-32 32V224H48c-17.7 0-32 14.3-32 32s14.3 32 32 32H192V432c0 17.7 14.3 32 32 32s32-14.3 32-32V288H400c17.7 0 32-14.3 32-32s-14.3-32-32-32H256V80z" fill="currentColor" />
        </svg>
      );
    }

    function CloseSVGIcon({ size, className }) {
      return (
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 448 512" className={className}>
          <path d="M342.6 150.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L192 210.7 86.6 105.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L146.7 256 41.4 361.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L192 301.3 297.4 406.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L237.3 256 342.6 150.6z" fill="currentColor" />
        </svg>
      );
    }

    const container = document.getElementById("root");
    const root = ReactDOM.createRoot(container);
    root.render(<App />);  
  </script> --}}




</body>

</html>