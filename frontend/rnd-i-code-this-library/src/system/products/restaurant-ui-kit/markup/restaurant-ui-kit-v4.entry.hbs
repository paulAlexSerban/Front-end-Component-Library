<html lang="en" data-theme="light">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Restaurant Ui Kit</title>
  <link rel="stylesheet" type="text/css" href="style.css">
</head>

<body>
  <main id="restaurants">
    <h1>Restaurants</h1>
    <ul>
      <li>
        <img width="100" height="100" src="https://source.unsplash.com/300x300/?salad">
        <div class="details">
          <div class="name-rating">
            <h2>Clärchens Ballhaus</h2>
            <div class="rating">
              <svg class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="1" stroke="currentColor"
                fill="none" stroke-linecap="round" stroke-linejoin="round">
                <path
                  d="M12 17.75l-6.172 3.245l1.179 -6.873l-5 -4.867l6.9 -1l3.086 -6.253l3.086 6.253l6.9 1l-5 4.867l1.179 6.873z">
                </path>
              </svg>
              <span>4.5</span>
              <span class="sr-only">stars</span>
            </div>
          </div>
          <div class="address">
            <svg class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="1" stroke="currentColor"
              fill="none" stroke-linecap="round" stroke-linejoin="round">
              <path d="M9 11a3 3 0 1 0 6 0a3 3 0 0 0 -6 0"></path>
              <path d="M17.657 16.657l-4.243 4.243a2 2 0 0 1 -2.827 0l-4.244 -4.243a8 8 0 1 1 11.314 0z"></path>
            </svg>
            <span>Clärchens Ballhaus Auguststraße 24 10117 Berlin</span>
          </div>
          <div class="hours">
            <svg class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="1" stroke="currentColor"
              fill="none" stroke-linecap="round" stroke-linejoin="round">
              <path d="M12 12m-9 0a9 9 0 1 0 18 0a9 9 0 1 0 -18 0"></path>
              <path d="M12 12l3 2"></path>
              <path d="M12 7v5"></path>
            </svg>
            <span><strong>Open Now</strong> - Closes at 2:00 am</span>
          </div>
        </div>
        <button>Reserve a Table</button>
      </li>
    </ul>
  </main>
  <aside id="people">
    <header>
      <svg class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="1" stroke="currentColor" fill="none"
        stroke-linecap="round" stroke-linejoin="round">
        <path d="M9 7m-4 0a4 4 0 1 0 8 0a4 4 0 1 0 -8 0"></path>
        <path d="M3 21v-2a4 4 0 0 1 4 -4h4a4 4 0 0 1 4 4v2"></path>
        <path d="M16 3.13a4 4 0 0 1 0 7.75"></path>
        <path d="M21 21v-2a4 4 0 0 0 -3 -3.85"></path>
      </svg>
      <h2>Choose how many people:</h2>
    </header>
    <hr>
    <div>
      <label><input type="radio" name="people"><span>1</span></label>
      <label><input type="radio" name="people"><span>2</span></label>
      <label><input type="radio" name="people"><span>3</span></label>
      <label><input type="radio" name="people"><span>4</span></label>
      <label><input type="radio" name="people"><span>5</span></label>
      <label><input type="radio" name="people"><span>6</span></label>
      <label><input type="radio" name="people"><span>7</span></label>
      <label><input type="radio" name="people"><span>8</span></label>
      <label><input type="radio" name="people"><span>9</span></label>
      <label><input type="radio" name="people"><span>10</span></label>
      <label><input type="radio" name="people"><span>11</span></label>
      <label><input type="radio" name="people"><span>12</span></label>
      <label><input type="radio" name="people"><span>13</span></label>
      <label><input type="radio" name="people"><span>14</span></label>
      <label><input type="radio" name="people"><span>15</span></label>
      <label><input type="radio" name="people"><span>16</span></label>
      <label><input type="radio" name="people"><span>17</span></label>
      <label><input type="radio" name="people"><span>18</span></label>
      <label><input type="radio" name="people"><span>19</span></label>
      <label><input type="radio" name="people"><span>20</span></label>
    </div>
    <button class="link">More then <span>20</span> people?</button>
  </aside>
  <aside id="time">
    <header>
      <svg class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="1" stroke="currentColor" fill="none"
        stroke-linecap="round" stroke-linejoin="round">
        <path d="M12 12m-9 0a9 9 0 1 0 18 0a9 9 0 1 0 -18 0"></path>
        <path d="M12 12l3 2"></path>
        <path d="M12 7v5"></path>
      </svg>
      <h2>Choose a time:</h2>
    </header>
    <hr>
    <div>
      <label><input type="radio" name="time">8:00 pm</label>
      <label><input type="radio" name="time">8:30 pm</label>
      <label><input type="radio" name="time">9:00 pm</label>
      <label><input type="radio" name="time">9:30 pm</label>
    </div>
  </aside>
  <dialog id="settings-modal">
    <form>
      <button class="close-button" formmethod="dialog">
        <svg class="icon" width="24" height="24" stroke-width="1" stroke="currentColor" fill="none"
          stroke-linecap="round" stroke-linejoin="round">
          <path d="M18 6l-12 12"></path>
          <path d="M6 6l12 12"></path>
        </svg>
        <span>close</span>
      </button>
      <h2 class="settings-title">settings</h2>
      <label for="settings-darkmode">dark mode</label>
      <input id="settings-darkmode" class="toggle" type="checkbox">
      <label for="settings-hue">accent color</label>
      <div id="settings-hue-wrapper">
        <div id="settings-hue-preview"></div>
        <input id="settings-hue" type="range" min="0" max="360">
      </div>
    </form>
  </dialog>
  <script src="script.js"></script>


  <style>
    @import url("https://fonts.bunny.net/css2?family=Montserrat:wght@100..900&display=swap");

    *,
    *::before,
    *::after {
      box-sizing: border-box;
    }

    :root,
    [data-theme="light"] {
      --font-1-family: Montserrat, sans-serif;
      --font-1-weight-normal: 500;
      --font-1-weight-bold: 700;
      --line-height-small: 1.1;
      --line-height-medium: 1.25;
      --line-height-large: 1.5;
      --border-width: 0.1rem;
      --outline-offset: 0.1rem;
      --stroke-width-icon: 0.1rem;
      --radius-small: 0.25rem;
      --radius-medium: 0.5rem;
      --radius-large: 1rem;
      --size-small: clamp(0.5rem, 3vw, 1rem);
      --size-medium: clamp(0.5rem, 5vw, 1.5rem);
      --size-large: clamp(0.5rem, 8vw, 4rem);
      --speed-fast: 300ms;
      --speed-medium: 500ms;
      --speed-slow: 1500ms;
      --timing-function-default: ease-in-out;
      --noise: url("data:image/svg+xml,%3Csvg viewBox='0 0 200 200' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='n'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='0.65' numOctaves='3' stitchTiles='stitch' /%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23n)' /%3E%3C/svg%3E%0A");
      --l: 0.52;
      /* base color lightness */
      --c: 0.17;
      /* base color chroma */
      --h: 270;
      /* base color hue */
      --color-text-1: #333;
      --color-text-2: #777;
      --color-text-button: #fff;
      --color-background-1: oklch(calc(var(--l) + 0.41) calc(var(--c) - 0.13) var(--h));
      --color-background-2: #fff;
      --color-background-modal: var(--color-background-2);
      --color-accent-1: oklch(var(--l) var(--c) var(--h));
      --color-link-1: oklch(var(--l) var(--c) var(--h));
      --color-link-2: oklch(calc(var(--l) + 0) calc(var(--c) + 0) calc(var(--h) + 180));
      --filter-hover: brightness(0.9) contrast(1.5) saturate(0.9);
      --filter-image: none;
      --gradient-1: linear-gradient(315deg, var(--color-background-1), var(--color-background-2));
      --shadow-1: 0 0.5rem 1rem oklch(calc(var(--l) + 0) calc(var(--c) - 0.05) var(--h) / 0.75);
      --shadow-2: 0 0 1rem var(--color-background-1);
      --shadow-modal: 0 0 2rem oklch(var(--l) 0.025 var(--h) / 0.75);
      color: var(--color-text-1);
      color-scheme: only light;
    }

    ::backdrop,
    [data-theme="light"] ::backdrop {
      backdrop-filter: blur(3px);
      background-color: #dddb;
    }

    [data-theme="dark"] {
      --l: 0.66;
      --color-text-1: #bbb;
      --color-text-2: #444;
      --color-background-1: oklch(calc(var(--l) - 0.34) calc(var(--c) - 0.13) var(--h));
      --color-background-2: oklch(calc(var(--l) - 0.46) calc(var(--c) - 0.13) var(--h));
      --color-link-1: oklch(calc(var(--l) - 0.2) var(--c) var(--h));
      --color-link-2: oklch(calc(var(--l) - 0.2) calc(var(--c) + 0) calc(var(--h) + 180));
      --filter-hover: brightness(1.2) contrast(1.5) saturate(0.9);
      --filter-image: brightness(0.8);
      --shadow-1: 0 0.5rem 1rem oklch(calc(var(--l) - 0.45) calc(var(--c) - 0.12) var(--h) / 0.75);
      --shadow-modal: 0 0 2rem var(--border-width) oklch(0.1 0.025 var(--h) / 0.75);
      color: var(--color-text-1);
      color-scheme: only dark;
    }

    [data-theme="dark"] ::backdrop {
      background-color: #111a;
    }

    [hidden] {
      display: none !important;
    }

    :focus {
      outline-offset: var(--outline-offset);
    }

    .sr-only:not(:focus):not(:active):not(:focus-within),
    #restaurants li:not(:hover) button:not(:focus-visible),
    aside input[type="radio"] {
      clip: rect(0 0 0 0);
      clip-path: inset(50%);
      height: 1px;
      overflow: hidden;
      position: absolute;
      white-space: nowrap;
      width: 1px;
    }

    img,
    svg {
      block-size: auto;
      max-inline-size: 100%;
    }

    img,
    svg:not(.icon) {
      filter: var(--filter-image);
    }

    svg.icon {
      stroke-width: var(--stroke-width-icon);
      color: var(--color-accent-1);
      flex-shrink: 0;
    }

    h1,
    h2,
    h3,
    h4,
    h5,
    h6 {
      font-family: var(--font-1-family);
      font-weight: var(--font-1-weight-bold);
      margin: 0;
      text-wrap: balance;
    }

    a {
      color: var(--color-link-1);
      transition: color var(--speed-fast) var(--timing-function-default);
    }

    a:focus-visible,
    a:hover {
      filter: var(--filter-hover);
    }

    p {
      margin: 0;
    }

    input,
    textarea {
      background-color: transparent;
      color: inherit;
      font-family: inherit;
      font-size: inherit;
      font-weight: inherit;
      margin: 0;
    }

    input:not([type="checkbox"]):not([type="radio"]):not([type="file"]):not([type="reset"]):not([type="submit"]):not([type="button"]),
    textarea {
      block-size: 3rem;
      border: var(--border-width) solid currentColor;
      border-radius: var(--radius-small);
      display: flex;
      inline-size: 100%;
      max-inline-size: 100%;
      padding-inline: 1rem;
    }

    textarea {
      block-size: 6rem;
    }

    input[type="checkbox"] {
      align-items: center;
      appearance: none;
      block-size: 1.8rem;
      border: var(--border-width) solid currentColor;
      border-radius: var(--radius-small);
      cursor: pointer;
      display: flex;
      flex-shrink: 0;
      inline-size: 1.8rem;
      justify-content: center;
    }

    input[type="checkbox"]:checked::before {
      color: var(--color-accent-1);
      content: "\2713";
      font-size: 1.4rem;
      font-weight: var(--font-1-weight-bold);
    }

    input[type="checkbox"].toggle {
      border-radius: 0.9rem;
      inline-size: 3.25rem;
      justify-content: start;
      margin: 0;
      padding: 0.2rem;
    }

    input[type="checkbox"].toggle::before {
      background-color: currentColor;
      block-size: calc(1.6rem - 2 * var(--border-width));
      border-radius: 50%;
      content: "";
      flex-shrink: 0;
      inline-size: calc(1.6rem - 2 * var(--border-width));
      transition: all var(--speed-fast) var(--timing-function-default);
    }

    input[type="checkbox"].toggle:checked::before {
      background-color: var(--color-accent-1);
      margin-left: 1.25rem;
    }

    input[type="radio"] {
      align-items: center;
      appearance: none;
      block-size: 1.8rem;
      border: var(--border-width) solid currentColor;
      border-radius: 50%;
      cursor: pointer;
      display: flex;
      flex-shrink: 0;
      inline-size: 1.8rem;
      justify-content: center;
    }

    input[type="radio"]:checked::before {
      background-color: var(--color-accent-1);
      block-size: calc(1.6rem - 2 * var(--border-width));
      border-radius: 50%;
      content: "";
      flex-shrink: 0;
      inline-size: calc(1.6rem - 2 * var(--border-width));
      transition: all var(--speed-fast) var(--timing-function-default);
    }

    button,
    input[type="button"],
    input[type="submit"],
    input[type="reset"] {
      align-items: center;
      appearance: none;
      background: none;
      background-color: var(--color-link-1);
      border: none;
      border-color: transparent;
      border-radius: var(--radius-small);
      color: var(--color-text-button);
      cursor: pointer;
      display: flex;
      font-family: inherit;
      font-size: inherit;
      font-weight: inherit;
      justify-content: center;
      min-block-size: 3rem;
      padding-block: 0.25rem;
      padding-inline: 1rem;
      transition: all var(--speed-fast) var(--timing-function-default);
    }

    button:focus-visible,
    button:hover,
    input[type="button"]:focus-visible,
    input[type="button"]:hover,
    input[type="reset"]:focus-visible,
    input[type="reset"]:hover,
    input[type="submit"]:focus-visible,
    input[type="submit"]:hover {
      filter: var(--filter-hover);
    }

    button.outline,
    input[type="button"].outline,
    input[type="reset"].outline,
    input[type="submit"].outline {
      background-color: transparent;
      border: var(--border-width) solid currentColor;
      color: var(--color-link-1);
    }

    button.outline:focus-visible,
    button.outline:hover,
    input[type="button"].outline:focus-visible,
    input[type="button"].outline:hover,
    input[type="reset"].outline:focus-visible,
    input[type="reset"].outline:hover,
    input[type="submit"].outline:focus-visible,
    input[type="submit"].outline:hover {
      background-color: oklch(var(--l) var(--c) var(--h) / 0.2);
    }

    button.secondary,
    input[type="button"].secondary,
    input[type="reset"].secondary,
    input[type="submit"].secondary {
      background-color: var(--color-link-2);
    }

    button.secondary:focus-visible,
    button.secondary:hover,
    input[type="button"].secondary:focus-visible,
    input[type="button"].secondary:hover,
    input[type="reset"].secondary:focus-visible,
    input[type="reset"].secondary:hover,
    input[type="submit"].secondary:focus-visible,
    input[type="submit"].secondary:hover {
      filter: var(--filter-hover);
    }

    button.link {
      background-color: transparent;
      border: none;
      border-radius: 0;
      color: var(--color-link-1);
      display: inline;
      font-weight: var(--font-1-weight-normal);
      inline-size: auto;
      min-block-size: 0;
      padding: 0;
      text-align: inherit;
    }

    button.link:focus-visible,
    button.link:hover {
      text-decoration: underline;
    }

    button[disabled],
    input[type="button"][disabled],
    input[type="reset"][disabled],
    input[type="submit"][disabled] {
      background-color: transparent;
      color: currentColor;
      cursor: not-allowed;
    }

    select {
      appearance: none;
      background-color: transparent;
      background-image: conic-gradient(from -40deg, currentColor 80deg, transparent 80deg);
      background-position: calc(100% - 1rem) calc(50% + 0.25rem);
      background-repeat: no-repeat;
      background-size: 1rem 1rem;
      block-size: 3rem;
      border: var(--border-width) solid currentColor;
      border-radius: var(--radius-small);
      color: inherit;
      cursor: pointer;
      display: flex;
      font-family: inherit;
      font-size: inherit;
      font-weight: inherit;
      inline-size: 100%;
      margin-block: var(--size-medium);
      max-inline-size: 100%;
      padding-inline: 1rem 3rem;
    }

    select:focus {
      background-image: conic-gradient(from 140deg, currentColor 80deg, transparent 80deg);
      background-position: calc(100% - 1rem) calc(50% - 0.25rem);
    }

    label {
      cursor: pointer;
    }

    dialog[open] {
      animation: var(--speed-fast) var(--timing-function-default) 0s backwards scale-up;
      background-color: transparent;
      border: none;
      color: inherit;
      inset: 0;
      max-block-size: 100%;
      max-inline-size: 100%;
      overflow: visible;
      padding: 0;
      position: fixed;
    }

    dialog>* {
      background-color: var(--color-background-modal);
      border-radius: var(--radius-medium);
      box-shadow: var(--shadow-modal);
      display: grid;
      padding: var(--size-medium);
      position: relative;
    }

    .hiding {
      animation: var(--speed-fast) var(--timing-function-default) 0s backwards scale-down !important;
    }

    nav ul {
      display: flex;
      list-style: none;
      margin: 0;
      padding: 0;
    }

    body {
      accent-color: var(--color-accent-1);
      align-items: center;
      background-color: var(--color-background-1);
      display: grid;
      font-family: var(--font-1-family);
      font-weight: var(--font-1-weight-normal);
      justify-content: center;
      line-height: var(--line-height-medium);
      margin: 0;
      min-block-size: 100vh;
      padding: 0.5rem;
      padding-block-end: 4rem;
      gap: 1rem;
    }

    main,
    aside {
      animation: var(--speed-medium) var(--timing-function-default) 0s backwards scale-up;
      background-color: var(--color-background-2);
      border-radius: var(--radius-medium);
      box-shadow: var(--shadow-1);
      display: grid;
      inline-size: 100%;
      max-inline-size: 28rem;
      padding: var(--size-medium);
      transition: all var(--speed-medium) var(--timing-function-default);
      gap: 0.5rem;
    }

    #restaurants ul {
      list-style: none;
      margin: 0;
      padding: 0;
    }

    #restaurants li {
      display: flex;
      flex-wrap: wrap;
      position: relative;
      gap: 0.75rem;
    }

    #restaurants img,
    #restaurants svg {
      flex-shrink: 0;
    }

    #restaurants img {
      align-self: start;
      border-radius: var(--radius-small);
    }

    #restaurants .details {
      display: grid;
      gap: 0.35rem;
      max-inline-size: 18rem;
    }

    #restaurants .name-rating {
      display: flex;
      justify-content: space-between;
      align-items: center;
      gap: 0.5rem;
    }

    #restaurants .rating,
    #restaurants .address,
    #restaurants .hours {
      display: flex;
      gap: 0.25rem;
      align-items: center;
    }

    #restaurants .address svg,
    #restaurants .hours svg {
      align-self: start;
    }

    #restaurants button {
      position: absolute;
      inset: 0;
      inline-size: 100%;
    }

    aside header {
      display: flex;
      gap: 0.5rem;
      align-items: center;
    }

    hr {
      display: flex;
      background-color: currentColor;
      block-size: calc(0.75 * var(--border-width));
      border: none;
      inline-size: 100%;
      opacity: 0.25;
    }

    h1 {
      font-size: 1.4rem;
      line-height: 1;
    }

    h2 {
      font-size: 1rem;
      font-weight: inherit;
    }

    aside>div {
      display: flex;
      flex-wrap: wrap;
      gap: 0.125rem;
    }

    aside label {
      display: flex;
      block-size: 2.5rem;
      min-inline-size: 2.5rem;
      border-radius: 100vmax;
      justify-content: center;
      align-items: center;
      transition: all var(--speed-medium) var(--timing-function-default);
    }

    aside label:has(input:checked) {
      background-color: var(--color-accent-1);
      font-weight: var(--font-1-weight-bold);
      color: var(--color-text-button);
    }

    aside label:has(input:focus-visible) {
      outline: 0.1rem solid var(--color-accent-1);
      outline-offset: var(--outline-offset);
    }

    #time label {
      min-inline-size: 6rem;
    }

    #settings-modal {
      inline-size: 23rem;
    }

    #settings-modal h2 {
      text-transform: capitalize;
    }

    #settings-modal p {
      margin: 0;
      text-transform: capitalize;
    }

    #settings-modal label {
      display: block;
      margin-block: 1rem 0.25rem;
      text-transform: capitalize;
    }

    .settings-open-button {
      background-color: var(--color-background-1);
      block-size: 3rem;
      border: 0 solid currentColor;
      color: inherit;
      inline-size: auto;
      inset-block-end: 0.5rem;
      inset-inline-start: 0.5rem;
      min-inline-size: 3rem;
      padding-inline: 0.75rem;
      position: fixed;
    }

    .settings-open-button:focus-visible,
    .settings-open-button:hover {
      background-color: var(--color-background-1);
      border-width: var(--border-width);
    }

    .settings-open-button span {
      padding-inline-start: 0.25rem;
      text-transform: capitalize;
    }

    .settings-open-button svg,
    .close-button svg {
      block-size: auto;
      inline-size: 1.5rem;
    }

    .settings-open-button:not(:hover):not(:focus):not(:active):not(:focus-within) span,
    .close-button span {
      clip: rect(0 0 0 0);
      clip-path: inset(50%);
      height: 1px;
      overflow: hidden;
      position: absolute;
      white-space: nowrap;
      width: 1px;
    }

    .close-button {
      background-color: transparent;
      block-size: 3rem;
      border-radius: 100vmax;
      color: inherit;
      inline-size: 3rem;
      inset-block-start: 0.25rem;
      inset-inline-end: 0.25rem;
      padding: 0;
      position: absolute;
    }

    .close-button:focus-visible,
    .close-button:hover {
      color: var(--color-background-modal);
    }

    #settings-hue-wrapper {
      align-items: center;
      display: flex;
    }

    #settings-hue {
      -webkit-appearance: none;
      background-image: linear-gradient(to right, oklch(var(--l) var(--c) 0), oklch(var(--l) var(--c) 90), oklch(var(--l) var(--c) 180), oklch(var(--l) var(--c) 270), oklch(var(--l) var(--c) 360));
      block-size: 1.8rem;
      border: none;
      border-radius: var(--radius-small);
      color: inherit;
      cursor: crosshair;
      display: flex;
      inline-size: 17.5rem;
      margin-inline: 0;
      max-inline-size: 100%;
      padding: 0;
    }

    #settings-hue::-moz-range-thumb {
      background: transparent;
      border: var(--border-width) solid currentColor;
      border-radius: 1rem;
      box-sizing: content-box;
      cursor: pointer;
      height: 1.8rem;
      width: var(--radius-small);
    }

    #settings-hue::-webkit-slider-thumb {
      -webkit-appearance: none;
      background: transparent;
      border: var(--border-width) solid currentColor;
      border-radius: 1rem;
      box-sizing: content-box;
      cursor: pointer;
      height: 1.8rem;
      width: var(--border-width);
    }

    #settings-hue::-ms-thumb {
      background: transparent;
      border: var(--border-width) solid currentColor;
      border-radius: 1rem;
      box-sizing: content-box;
      cursor: pointer;
      height: 1.8rem;
      width: var(--border-width);
    }

    #settings-hue-preview {
      background-color: var(--color-accent-1);
      block-size: 2rem;
      border-radius: var(--radius-largest);
      display: flex;
      inline-size: 2rem;
      margin-inline-end: 0.25rem;
    }

    @keyframes scale-up {
      from {
        opacity: 0;
        transform: scale(0);
      }

      to {
        opacity: 1;
        transform: scale(1);
      }
    }

    @keyframes scale-down {
      from {
        opacity: 1;
        transform: scale(1);
      }

      to {
        opacity: 0;
        transform: scale(0);
      }
    }

    @keyframes fade-in {
      from {
        opacity: 0;
      }

      to {
        opacity: 1;
      }
    }

    @keyframes from-top {
      from {
        transform: translateY(-100vh);
      }

      to {
        transform: translateY(0);
      }
    }

    @keyframes from-bottom {
      from {
        transform: translateY(100vh);
      }

      to {
        transform: translateY(0);
      }
    }

    @keyframes from-left {
      from {
        transform: translateX(-100vw);
      }

      to {
        transform: translateX(0);
      }
    }

    @keyframes from-right {
      from {
        transform: translateX(100vw);
      }

      to {
        transform: translateX(0);
      }
    }

    @media (min-width: 40rem) {}
  </style>
  <script type="module">
    "use strict";
    addEventListener("DOMContentLoaded", () => {
      //// thumbnail hack
      if (navigator.userAgent.includes("Headless")) {
        document.documentElement.style.setProperty("--speed-fast", "0s");
        document.documentElement.style.setProperty("--speed-medium", "0s");
        document.documentElement.style.setProperty("--speed-slow", "0s");
        //const workInProgress = `<span style="position: absolute; inset-inline: 0; inset-block-end: 0; inline-size: 100%; color: #fff; background-color: #2c2446; font-size: 3rem; font-weight: bold; text-align: center; padding: 0.5rem;">Work in progress…<span>`;
        //document.body.insertAdjacentHTML("beforeend", workInProgress);
        document.body.style.setProperty("padding-block-end", "0");
        document.body.style.setProperty("margin-block-start", "152px");
        document.body.style.setProperty("min-block-size", "0");
        document.body.style.setProperty("block-size", "calc(100vh - 304px)");
        document.body.style.setProperty("position", "relative");
        document.querySelectorAll("aside").forEach((aside) => {
          aside.hidden = false;
        });
        document.querySelector("#people label:nth-of-type(4)").click();
        document.querySelector("#time label:nth-of-type(2)").click();
      }

      //// reserve
      document.querySelector("#restaurants button").addEventListener("click", () => {
        document.querySelectorAll("aside").forEach((aside) => {
          aside.hidden = false;
        });
      });

      //// more then 20 people
      document.querySelector("#people button").addEventListener("click", () => {
        let people = parseInt(document.querySelector("#people label:last-of-type span").innerHTML) + 1;
        document.querySelectorAll("#people label").forEach((label) => {
          label.querySelector("input").checked = false;
          label.querySelector("span").innerHTML = people;
          people += 1;
        });
        document.querySelector("#people button span").innerHTML = document.querySelector("#people label:last-of-type span").innerHTML;
      });

      //// closing
      // closing dialog
      document.querySelectorAll("dialog").forEach((dialog) => {
        // close .hiding dialog after animation ends
        dialog.addEventListener("animationend", (event) => {
          if (event.target.classList.contains("hiding")) {
            event.target.close();
            event.target.classList.remove("hiding");
          }
        });
        // add .hiding class when clicked on modal backdrop
        dialog.addEventListener("click", (event) => {
          const dialog = event.target.closest("dialog");
          const rect = dialog.getBoundingClientRect();
          const isInDialog = rect.top <= event.clientY && event.clientY <= rect.top + rect.height && rect.left <= event.clientX && event.clientX <= rect.left + rect.width;
          if (!isInDialog && event.target.tagName === "DIALOG") {
            dialog.classList.add("hiding");
          }
        });
      });
      // closing .hideable
      document.querySelectorAll(".hideable").forEach((element) => {
        // close .hiding after animation ends
        element.addEventListener("animationend", (event) => {
          if (event.target.classList.contains("hiding")) {
            event.target.hidden = true;
            event.target.classList.remove("hiding");
          }
        });
      });
      /// close buttons
      document.querySelectorAll(".close-button").forEach((button) => {
        button.addEventListener("click", (event) => {
          event.preventDefault();
          event.target.closest("button").blur();
          event.target.closest("dialog, .hideable").classList.add("hiding");
        });
      });

      //// settings
      /// open settings modal
      const settingsOpenButtonHTML = `
	  <button class="settings-open-button">
			<svg class="icon" width="24" height="24" stroke-width="1" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
				<path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
				<path d="M4 10a2 2 0 1 0 4 0a2 2 0 0 0 -4 0"></path>
				<path d="M6 4v4"></path>
				<path d="M6 12v8"></path>
				<path d="M10 16a2 2 0 1 0 4 0a2 2 0 0 0 -4 0"></path>
				<path d="M12 4v10"></path>
				<path d="M12 18v2"></path>
				<path d="M16 7a2 2 0 1 0 4 0a2 2 0 0 0 -4 0"></path>
				<path d="M18 4v1"></path>
				<path d="M18 9v11"></path>
			</svg>
			<span>settings</span>
		</button>`;
      document.body.insertAdjacentHTML("beforeend", settingsOpenButtonHTML);
      document.querySelectorAll(".settings-open-button").forEach((button) => {
        button.addEventListener("click", () => {
          document.querySelector("#settings-modal").showModal();
        });
      });

      /// dark mode
      const settingsDarkmodeDOM = document.querySelector("#settings-darkmode");
      if (document.documentElement.getAttribute("data-theme") === "dark") settingsDarkmodeDOM.checked = true;
      else settingsDarkmodeDOM.checked = false;
      settingsDarkmodeDOM.addEventListener("change", () => {
        if (settingsDarkmodeDOM.checked) {
          document.documentElement.setAttribute("data-theme", "dark");
        } else {
          document.documentElement.setAttribute("data-theme", "light");
        }
      });

      /// accent color
      const settingsHueDOM = document.querySelector("#settings-hue");
      settingsHueDOM.value = getComputedStyle(document.documentElement).getPropertyValue("--h");
      settingsHueDOM.addEventListener("input", () => {
        document.documentElement.style.setProperty("--h", settingsHueDOM.value);
      });
    });

  </script>
  <button class="settings-open-button">
    <svg class="icon" width="24" height="24" stroke-width="1" stroke="currentColor" fill="none" stroke-linecap="round"
      stroke-linejoin="round">
      <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
      <path d="M4 10a2 2 0 1 0 4 0a2 2 0 0 0 -4 0"></path>
      <path d="M6 4v4"></path>
      <path d="M6 12v8"></path>
      <path d="M10 16a2 2 0 1 0 4 0a2 2 0 0 0 -4 0"></path>
      <path d="M12 4v10"></path>
      <path d="M12 18v2"></path>
      <path d="M16 7a2 2 0 1 0 4 0a2 2 0 0 0 -4 0"></path>
      <path d="M18 4v1"></path>
      <path d="M18 9v11"></path>
    </svg>
    <span>settings</span>
  </button>
</body>

</html>